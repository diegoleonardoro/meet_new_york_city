<!doctype html>

<html lang="en">

<head>
    <meta charset="utf-8">

    <title>User Inputs</title>
    <meta name="description" content="The HTML5 Herald">
    <meta name="author" content="SitePoint">

    <style>
        #map{
            padding-top: 100px;
            margin-left: 200px;        
        }


       #tooltip{ 
            position: absolute; 
            z-index: 2; 
            background: rgba(0,153,76,0.8); 
            /* width:500px; 
            height:20px; these two are now controlled from JavaScript */ 
            color:white; 
            font-size: 14px; 
            padding:5px; 
            top:-150px; 
            left:-150px; 
            font-family: "HelveticaNeue-Light", "Helvetica Neue Light", 
            "Helvetica Neue", Helvetica, Arial, "Lucida Grande", sans-serif; 
            
        } 

        .placeImage{
            position: relative; 
            left: 60px;
            top: 20px;
           
        }
        .placeMeaning{
            position: relative; 
            left: 60px;
        }

    </style>
</head>

<body>




    <div id="mapDiv">
        <div id="feed"></div>
        <div id="map"></div>
        <div id="streetsMap"></div>
        <div id="tooltip"></div>
        <div id="container" class="svg-container"></div>
    </div>

    <p>

    </p>

    <script src="http://d3js.org/d3.v4.min.js" charset="utf-8"></script>
    <script src="https://unpkg.com/topojson@3"></script>
    <script src="https://js.api.here.com/v3/3.1/mapsjs-core.js" type="text/javascript" charset="utf-8"></script>
    <script src="https://js.api.here.com/v3/3.1/mapsjs-service.js" type="text/javascript" charset="utf-8"></script>
    <script type="module" src="https://js.api.here.com/v3/3.1/mapsjs.bundle.js"></script>
    <script src="https://kit.fontawesome.com/a8ea7ecad9.js" crossorigin="anonymous"></script>



    <script>

        (function () {

            var userData = JSON.parse('<%- JSON.stringify(userData) %>');

            // console.log(userData);

            //-------- Get the coordinates of each place -------- //
            var coords1 = userData[0].coords;
            var coords2 = userData[1].coords;
            const allCoords = userData.map(record => record.coords);

            // console.log(userData[0].image.height); // ---> prints undefined 
            //--------------------------------------------------- //


            var height = 900,
                width = 1200,
                projection = d3.geoMercator(), // geoMercator() is a way of projecting the map.
                nyc = void 0,
                map = void 0,
                streetMap = void 0,
                nycStreets = void 0;

            // ------------ Zoom ------------ //
            // Create the function that will allow the zoom to happen:
            // d3.event.transform.k: This defines the zoom level in terms of an SVG scale.
            // d3.event.transform.x and .y: These define the positions of the map in relation to the mouse in terms of an SVG translate.
            var zoomed = function () {
                map.attr("transform", "translate(" + d3.event.transform.x + "," + d3.event.transform.y + ") scale(" +
                    d3.event.transform.k + ")");
            }

            // set up the zoom behavior
            var zoom = d3.zoom()
                .scaleExtent([1, 8])
                .on("zoom", zoomed)
            // ------------------------------ //


            // ---- GeoID function ---- //
            var GeoID = function (d) { // Lets us assign a unique value to each element in the "districts" OBJ
                return "c" + d.id
            }
            // --------------------- //


            // ---- create the Path --- //
            var path = d3.geoPath().projection(projection);

            // ------------ Appending the SVG ------------ //
            var svg = d3.select("#map")
                .append("svg")
                .attr("class", "generalSVG")
                .attr("width", width)
                .attr("height", height)
                .call(zoom);
            // ------------------------------------------- //


            d3.json("/geo-data.json", function (error, data) {

                districts = topojson.feature(data, data.objects.districts);

                var b, s, t;
                projection.scale(1).translate([0, 0]);
                var b = path.bounds(districts); // bounds represent a two dimensional array : [[left, bottom], [right, top]],
                var s = .9 / Math.max((b[1][0] - b[0][0]) / width, (b[1][1] - b[0][1]) / height);
                var t = [(width - s * (b[1][0] + b[0][0])) / 2, (height - s * (b[1][1] + b[0][1])) / 2];
                projection.scale(s).translate(t);;


                map = svg.append("g").attr("class", "boundary");
                nyc = map.selectAll("path").data(districts.features);

                nyc.enter()
                    .append("path")
                    .attr("d", path)
                    .attr("id", GeoID)
                    .style("stroke", "black")
                    .attr("stroke-width", .2)

                nyc.attr("fill", "#eee")
                nyc.exit().remove();


                d3.json("/nyc-streets.json", function (error, data) {

                    var streets = data.features;

                    projection.scale(1).translate([0, 0]);
                    projection.scale(s).translate(t);

                    streetMap = map.append("g").attr("class", "boundary2");
                    nycStreets = streetMap.selectAll("path").data(streets)
                    nycStreets.enter()
                        .append("path")
                        .attr("d", path)
                        .attr("stroke-width", "0.25")
                        .attr("stroke-opacity", "0.3")
                        .style("fill-opacity", 0)
                        .style("stroke", "white")

                    nycStreets.attr("fill", "#eee")
                    nycStreets.exit().remove()


                    //  var texto = `<p> holi < img src = ${d.image} > </p>`

                    var hover = function (d) {

                        var div = document.getElementById("tooltip")
                        div.style.left = event.pageX + "px";
                        div.style.top = event.pageY + "px";
                        div.style.width = "500px";
                        div.style.height = "400px";
                        div.innerHTML = "<p class ='placeMeaning'>"+ d.placeMeaning + "</p>;<img width='400' height='321' class= 'placeImage' src =" + d.image + ">"

                    }





                    var cirlcesGroup = svg.append("g").attr("class", "circlePlaces");
                    var circlePlaces = cirlcesGroup.selectAll("circle").data(userData);

                    circlePlaces.enter()
                        .append("circle")
                        .attr("cx", function (d) { return projection([d.coords[0].lng.toString(), d.coords[0].lat.toString()])[0] })
                        .attr("cy", function (d) { return projection([d.coords[0].lng.toString(), d.coords[0].lat.toString()])[1] })
                        .attr("r", 6)
                        .attr("fill", "blue")
                        .on("mouseover", hover)




                    /*
                                        function pinpointPlaces(userData) {
                                            var places = map.append("circle")
                                                .attr("cx", projection([userData.coords[0].lng.toString(), userData.coords[0].lat.toString()])[0])
                                                .attr("cy", projection([userData.coords[0].lng.toString(), userData.coords[0].lat.toString()])[1])
                                                .attr("r", 6)
                                                .attr("fill", "blue")
                                                .on("mouseover", hover)
                    
                                        }
                    
                                        userData.forEach(element => pinpointPlaces(element));
                    */



                })


            })




        })()
    </script>

</body>

</html>